# Description: get all products from 
# the conveyor belt and return them
# to their storage.

# Challenge: Ability to read and
# understand code with procedures. 
# Understand and work with double
# conditions.

# Get all products from the conveyor belt
repeat()
{
    getProduct      # Get something from the conveyor belt.
    putProductBack  # Let Robo put the product away in the right place!
    goBackToStart   # Ready. Back to start for the next product.
}

procedure putProductBack()
{
    # 1. palm oil: what is the correct barcode?
    if (frontIsWhite and leftIsWhite)
    {
        goToStart    # Robo returns to the start position first.
        bringBack(10) # 2. How many steps to the entry of the palm oil storage?
    }

    # 3. water: what is the correct barcode?
    else if (frontIsBlack and leftIsWhite)
    {
        goToStart    # Robo returns to the start position first.
        bringBack(17) # 4. How many steps to the entry of the water storage?
    }
    
    # 5. crates: what is the correct barcode?
    else if (frontIsBlack and leftIsBlack)
    {
        goToStart    # Robo returns to the start position first.
        bringBack(25) # 6. How many steps to the entry of the crates storage?
    }
    
    # 7. vegetables: what is the correct barcode?
    else if (frontIsWhite and leftIsBlack)
    {
        goToStart    # Robo returns to the start position first.
        bringBack(32) # 8. How many steps to the entry of the vegetable storage?
    }
    
    # hmm, something went wrong??? I am going to stop.
    else
    {
        end
    }
}

procedure bringBack(n)
{
    repeatWhile( frontIsClear)
    {
        forward(1)
    }
    right
    forward(n)
    left
    repeatWhile( frontIsClear)
    {
        forward(1)
    }
    backward(1)
    putDown
}

procedure goToStart
{
    right
    right
    repeatWhile( frontIsClear)
    {
        forward(1)
    }
    right
}

procedure goBackToStart
{
    right
    right
    repeatWhile( frontIsClear )
    {
        forward(1)
    }
    right
    repeatWhile( frontIsClear )
    {
        forward(1)
    }
    right
    backward(6)
}

procedure getProduct
{
    right
    repeat()
    {
        if (frontIsClear)
        {
            forward(1)
        }
        else if (frontIsBeacon)
        {
            pickUp
            return
        }
        else
        {
            end
        }
    }
}