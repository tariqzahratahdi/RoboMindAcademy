# Description: Let the robot pick up
# the beacon. Use random search and
# use black paint to prevent retracing
# your steps as much as possible.

# Challenge: Use flipCoin and PaintBlack
# Enumerate the options the robot has
# in every situation and let him randomly
# choose between those options, but stay
# on the white lines!

# Solution:

# Main loop:
repeat(){
    StopIfBeacon()
    countWhite = AssessSituation()
    MakeDecision(countWhite)
}

procedure AssessSituation()
{
    count = 0
    # left white = 1
    if (leftIsWhite) {
        count = count + 1
    }
    # right white = 2
    if (RightIsWhite) {
        count = count + 2
    }
    #front white = 4
    if (FrontIsWhite) {
        count = count + 4
    }
    return (count)
}

procedure StopIfBeacon()
{
    if (leftIsBeacon) {
        left
    } else if(RightIsBeacon) {
        right
    } if (FrontIsBeacon) {
        pickUp
        forward
        end
    }
}

procedure MakeDecision(count)
{
    # one choice
    if (count == 1) {
        left
    } else if(count == 2) {
        right
    } else if(count == 4) {
        MakeForwardStep()
    }

    # two choices
    else if(count == 3) {
        if (flipCoin) {
           left
        } else {
           right
        }
    }
    else if(count == 5)
    {
        if (flipCoin) {
           left
        } else {
            MakeForwardStep()
        }
    }
    else if(count == 6)
    {
        if (flipCoin){
            right
        } else {
            MakeForwardStep()
        }
    }

    # three choices (prefer forward)
    else if(count == 7)
    {
       if (flipCoin) {
          if (flipCoin) {
             left
          } else {
             right
          }
       } else {
          MakeForwardStep()
       }
    }

    # no choice: we are retracing our steps
    else if(count == 0)
    {
        if (frontIsClear) {
            forward
        } else {
            if(leftIsClear) {
                left
            } else if(rightIsClear) {
                right
            }
            forward
        }
    }
}

Procedure MakeForwardStep()
{
    paintBlack
    forward
    stopPainting
}
